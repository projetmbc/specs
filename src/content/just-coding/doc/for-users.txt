this::
    date = 2023-05-20


================================================
Pour le "gentil utilisateur", soyons accueillant
================================================

Il semble vain de vouloir documenter son code directement dans le ¨src pour les raisons suivantes.

    1) Dans un code source, on souhaite guerre avoir plus de commentaires, et à fortiori de ¨doc, que de code. Dès lors, en documentant directement dans le code, on se retrouve vite à produire des ¨docs très ¨techs et peu attrayantes
    ((
        L'écosystème ¨latex est assez caractéristique de cet écueil. Une grande partie des projets fournissent une ¨doc destinée surtout aux "hackers". Ceci est très rebutant quand l'on commence la rédaction de ¨docus en ¨latex (heureusement, des projets plus récents évitent cet écueil).
    )).

    1) Expliquer le fonctionnement d'un code peut nécessiter de montrer des exemples s'appuyant sur différentes parties du code, et non juste quelques fonctions au sein d'un fichier. Il faut donc pouvoir rédiger une ¨doc en considérant l'¨ens du code.

    1) Enfin, pourquoi la ¨struc du code serait-elle bien adaptée à celle d'une ¨doc ?


C'est pour ces raisons qu'une ¨doc proposant des cas d'utilisation est aussi développée en parallèle du code ¨src et de sa ¨doc ¨tech
((
    L'auteur de ce ¨docu utilise le format ¨tns, l'un de ses projets en cours de ¨dev.
)).


warning::
    Cette approche souffre par contre d'un gros problème : la gestion des ¨majs du code et de deux ¨docs en parallèle. La section suivante aborde ce sujet.
