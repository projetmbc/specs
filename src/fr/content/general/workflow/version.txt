this::
    date = 2023-10-07


abrev::
    semversion = cf::''Gestion sémantique de version ;
                       https://semver.org/lang/fr/''

    softwarelife = cf::''Software release life cycle ;
                        https://en.wikipedia.org/wiki/Software_release_life_cycle''


===================
Nommer les versions
===================

Le \syst de nommage des versions s'appuie sur deux standards : voir "\semversion" et "\softwarelife". Nous utilisons surtout les règles suivantes largement suffisantes pour des projets non professionnels.
Nous donnons au passage des exemples sous forme de notes de bas de page où pour les \docus, "section" désignera de façon indifférente une partie, un chapitre, une section, une sous-section ou une sous-sous-section.

    1) Un \num de version est soit du type version::''MAJ.MIN.COR'', soit de la forme version::''MAJ.MIN.COR-EXTRA''.
    Aucun \num ne s'écrira version::''MAJ.MIN'', ni version::''MAJ'' !

    1) Chaque sous-\num commence à version::''0'', donc la toute première version sera version::''0.0.0'' obligatoirement.
    Attention car ni version::''0.0'', ni version::''0'' ne sont des \nums initiaux valides.

    1) Les \nums augmentent sous la forme suivante.

        a) Sans partie version::''EXTRA'', nous avons dans l'ordre croissant version::''0.0.0'', version::''0.0.1'', version::''0.0.2'', version::''0.1.0'', version::''1.0.0'', ... \etc.
        Noter qu'un \chgt de sous-\num remet à zéro tous les sous-\nums qui sont plus à droite.

        b) Si version::''EXTRA'' est employé, l'ordre retenu est le suivant où l'on part du moins prioritaire, et avec le même version::''EXTRA'', on reprend ce qui a été indiqué dans le point précédent.

            * version::''alpha''

            * version::''beta''

            * version::''rc''

            * Pas de partie version::''EXTRA''.

        Nous avons donc dans l'ordre croissant version::''0.0.0-alpha'', version::''0.0.0-beta'', version::''0.0.0-rc'', version::''0.0.0''.

    1) Le \num version::''MAJ'' est à modifier dès qu'un \chgt non rétrocompatible majeur apparaît
    ((
        **\Chgt majeur :**
        pour un \docu ceci correspond à l'organisation visible du contenu (sections supprimées \etou déplacées),
        et pour un \prog à un \chgt important d'\api (le \prog s'utilise différemment).
    )).

    1) Le \num version::''MIN'' évolue lorsque de \nelles fonctionnalités apparaissent avec éventuellement de très minimes \chgts non rétrocompatibles
    ((
        **\Chgt mineur :**
        pour un \docu ceci correspond à un enrichissement du contenu (\nelles sections \etou mises à jour de sections précédemment existantes),
        et pour un \prog à un enrichissement de l'\api sans modifier ce qu'elle proposait avant (le \prog s'utilise de la même façon, sauf peut-être à la marge, mais il a été enrichi de \nelles fonctionnalités).
    )).

    1) Le \num version::''COR'' change à chaque correction rétrocompatible d’anomalies
    ((
        **Correctifs :**
        pour un \docu ceci correspond à des corrections à la marge (erreurs orthographiques, grammaticales \etou syntaxiques, mais aussi une modification purement visuelle du contenu sans toucher à son organisation),
        et pour un \prog à la correction de bogues sans toucher à l'\api (le \prog s'utilise de la même façon).
    )).

    1) version::''EXTRA'' peut avoir les valeurs suivantes suivies éventuellement d'un point et d'un sous-\num : on peut donc utiliser version::''1.2.0-alpha'' et version::''1.2.0-alpha.2''.

        a) version::''alpha'' indique que les fonctionnalités sont incomplètes ou partiellement terminées.
        Ce type de projet est à destination uniquement des concepteurs.

        a) version::''beta'' s'utilise lorsque les fonctionnalités, bien que terminées, peuvent contenir des bogues et des \pbs de \perf.
        Ce type de projet s'adresse aux utilisateurs testeurs.

        a) version::''rc'', pour "release candidate", indique une version bêta avancée susceptible d'être un produit stable et prêt à être publiée à moins que des bogues importants n'apparaissent.
        Ce type de projet s'adresse aux utilisateurs "lambda" mais qui sont avertis que le projet contient peut-être quelques bogues mineurs à signaler.

        a) Pour les versions stables, c'est à dire celles considérées comme finies, à un moment donné bien entendu, nous n'utilisons pas version::''EXTRA'' tout simplement.
