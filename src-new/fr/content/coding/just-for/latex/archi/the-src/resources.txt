this::
    date = 2023-10-31


=======================
Des fichiers ressources
=======================

Il est très fréquent qu'un \proj nécessite l'emploi de ressources supplémentaires : fichiers de \conf, images, graphiques \tikz... \etc.
Ceci se fait très naturellement lors du codage à condition de savoir comment seront recollés les différents morceaux dans le \proj final afin d'éviter certaines déconvenues.


Considérons l'exemple fictif suivant où les dossiers path::''images'' et path::''graphics'' sont juste utilisés par les fichiers ext::''tex'' pour la \doc "humaine"
((
    On aborde ce sujet dans cf::''?/archi/the-docs.txt''.
)),
tandis que les fichiers de \config path::''stdval.sty'' et path::''speval.sty'' ne sont utiles qu'au code \src du package.

dirtree::
    ---
    path = ?/archi/example/resource/dirtree-init.txt
    ---


Après analyse de \texfacto, deux dossiers path::''fict-proj/fictproj''
((
    Noter la normalisation du nom verb::''fict-proj'' en verb::''fictproj'', ce dernier étant accepté par \latex.
)),
et path::''fict-proj/.tmpdoc'' seront créés, ou mis à jour ; nous aurons alors un contenu partiel du type suivant
((
    Le contenu et l'utilité du dossier path::''.tmpdoc'' sont donnés dans cf::''?/archi/the-docs.txt''.
)).

dirtree::
    ---
    path = ?/archi/example/resource/dirtree-final-no-doc.txt
    ---


Voici les pièges tendus par la procédure d'automatisation (heureusement en cas de souci, \texfacto lèvera un message d'erreur).

    1) \Ttes les ressources sont à placer dans des sous-dossiers de niveau `2` du dossier de \dev path::''src''.

    1) La structure des ressources pour le fichier final path::''fictproj.sty'' imite celle du dossier \src.
    Ceci implique d'éviter d'utiliser deux fois le même nom. Une bonne pratique consiste à utiliser un préfixe ou un dossier faisant \ref au bout de code implémenté.


caution::
    Bien importer les ressources via des chemins relatifs
    ((
        Mais normalement nous le faisons tous... Non ?
    )).
