this::
    date = 2023-10-25


==========================
Un exemple comme fil rouge
==========================

L'automatisation se fait en respectant un style de codage et une organisation "commune" des dossiers et des fichiers.
Pour la suite, nous allons travailler avec l'exemple suivant d'un \pack fictif nommé ''fictipack'', mais si besoin nous compléterons les explications pour le cas d'une classe, ou d'un \pack et d'une classe.

dirtree::
    + fictipack
        * about.yaml
        + src
            * about.yaml
            + intro
                * intro.tex
            + alpha-et-omega3
                * alpha.tex
                * alpha.sty
                * omega3.tex
                * omega3.sty
            + poor-lonesome-cowboy
                * about.yaml
                * lucky-1.tex
                * lucky-2.tex
                * lucky.sty
                * rantanplan.tex
                * rantanplan.sty
        + [...]


Voici des choses importantes à connaître et à respecter.

    1) Le \dev "morceau par morceau" se fait dans le sous-dossier path::''src''.

    1) Le fichier path::''intro/intro.tex'' explique rapidement le cadre d'utilisation du \pack. **Voir le dernier paragraphe pour le cas d'un \dev conjoint d'un \pack et d'une classe.**

    1) Chaque fichier ext::''sty'' codant un morceau du \pack doit se trouver dans un sous-dossier de profondeur `1` de path::''src''.
    Bien noter que l'on travaille directement dans un sous-dossier sans passer via des "sous-sous-dossiers" contenant le fichier ext::''sty''.

    1) Pour une classe, ce seront des fichiers ext::''cls'' qui seront codés en suivant des règles similaires à celles explicitées dans l'item précédent. Rappelons que l'on peut développer en parallèle une classe et un \pack ayant le même nom.

    1) Il est possible de rédiger des fichiers ext::''tex'' pour documenter des fonctionnalités.
    Dans ce cas, il faut aussi respecter une profondeur de `1` comme pour les fichiers ext::''sty''.
    Dans notre exemple fictif, path::''intro/intro.tex'' est considéré comme étant une \doc écrite dans la langue indiquée dans le fichier path:''src/about.yaml'' : voir cf::''?/metainfos/for-all.txt'' à ce propos.

    1) Des fichiers ressources pour le code \etou la \doc "utilisateur" peuvent être utilisés : voir cf::''?/resource.txt'' pour en savoir plus.

    1) Deux types de lecture ordonnée des dossiers et fichiers sont possibles
    ((
        Ceci est important pour la \doc finale à destination des utilisateurs, ou bien pour organiser du code si cela est nécessaire.
    )).

        * Un dossier sans fichier path::''about.yaml'' sera analysé en utilisant l'ordre \lexico usuel.
        Dans notre exemple fictif, le dossier path::''alpha-et-omega3'' sera analysé en prenant path::''alpha.sty'', puis path::''omega3.sty'' pour le code du \pack, ainsi que path::''alpha.tex'' suivi de path::''omega3.tex'' pour la \doc "utilisateur".

        * Dans un dossier \src, l'ajout d'un fichier path::''about.yaml'' permet d'imposer un ordre à suivre. Nous allons revenir sur ceci dans les deux sections suivantes.


warning::
    Le dossier path::''fictipack'' ne peut pas contenir un sous-dossier path::''fictipack'' où seront codées des fonctionnalités.
    Cela vient tout simplement du fait que le projet final sera créé \auto^t dans le sous-dossier path::''fictipack/fictipack'' en écrasant au préalable un éventuel sous-dossier path::''fictipack/fictipack'' existant.


Dans le cas d'un \dev en parallèle d'une classe et d'un \pack ayant le même nom, \texfacto va produire une unique \doc sauf si l'on utilise les préfixes verb::''sty'' et verb::''cls'' pour cibler les \docs pour le \pack et celles pour la classe \resp comme dans l'exemple suivant.

dirtree::
    + fictipackwithclass
        * about.yaml
        + src
            * about.yaml
            + intro
                * intro-cls.tex
                * intro-sty.tex
            + beta-le-lambda
                * beta-cls.tex
                * beta.cls
                * omega3-sty.tex
                * omega3.sty
        + [...]
