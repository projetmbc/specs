this::
    date = 2023-10-25


=============================
Structure commune des projets
=============================

Pour faciliter le \dev de différents projets, une structure commune de départ est proposée. Voici à quoi cela ressemble, des explications arrivant juste après.

dirtree::
    + my-new-project
        * README.md
        * about.yaml
        * versions.yaml
        + changes    [...]
        + contribute [...]
        + src        [...]


Expliquons l'utilité de chaque composant.

    1) Commencer par noter l'emploi de l'anglais même si le produit final sera en français. Pourquoi ? Ceci permet d'élargir l'audience, voire d'obtenir des contributions extérieures. Ne nous en privons pas par simple chauvinisme.

    1) Pour donner une vue globale d'un projet informatique, il est d'usage de fournir un fichier \readme décrivant succinctement en anglais le dit projet
    ((
        \multimd permet la rédaction du \readme morceau par morceau.
    )).


    1) Le fichier path::''about.yaml'' contient des \metainfos à propos du projet. Voici un exemple pour un projet \latex fictif où la syntaxe suit celle proposée par le projet \texfacto.

    yaml::
        project:
          desc   : Fictional package for this example.
          author : Christophe, BAL [projetmbc@gmail.com]
          licence: gnu 3

          lang:
            doc:
              - user: fr

          require:
            - latex

    **Rien n'empêche d'utiliser une autre syntaxe s'appuyant sur le format \json ou \toml par exemple**. Par contre, il faut rendre les \metainfos facilement à un programme informatique et à un oeil humain.

    1) Le fichier path::''versions.yaml'' suit le même type de règles générales que le fichier path::''about.yaml''.
    Le fichier path::''versions.yaml'' permet de rendre facilement accessible l'historique daté des \numvers. Voici un exemple fictif que pourrait produire \tnschges par analyse du dossier path::''changes'' dont on va parler dans l'item suivant.

    yaml::
        # Produced by tnschges on 2023-01-18.
        #
        # A reverse history is provided, in case a human reads this file,
        # but also because the first item gives the latest version.

        2023:
          01:
            13: 0.1.2-rc
            11: 0.1.1-rc
            05: 0.1.0-rc

        2022:
          12:
            27: 0.0.0-beta


    Comme **doubler les lieux de saisie d'une même \info augmente les risques d'erreur, il est conseillé de fabriquer path::''versions.yaml'' de façon automatisée via l'analyse du dossier path::''changes''** comme pour l'exemple fictif précédent.


    1) Le dossier path::''changes'' accueille les \chgts en suivant les indications données dans cf::''change-log.txt''.

    1) Le dossier path::''src'' est le code \src du projet à développer en suivant les règles indiquées dans cf::''?/archi.txt''.
    À partir d'un tel dossier, on construira le produit fini dans un sous-dossier dédié éponyme, ou presque, du dossier path::''my-new-project''. Voici des noms possibles
    ((
        La \modif du nom dépend du type de projet. Par exemple, \latex n'aime pas les \_frs dans les noms de packages et de classes.
    )).

        * path::''my-new-project''

        * path::''my_new_project''

        * path::''mynewproject''

        * path::''myNewProject''

        * path::''MyNewProject''

    1) Le dossier facultatif path::''contribute'' permet d'accueillir des contributions extérieures comme par exemple des \trads.
